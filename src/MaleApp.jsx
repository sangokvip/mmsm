import React, { useState, useRef } from 'react'
import { Container, Typography, Paper, Grid, Box, Select, MenuItem, Button, Dialog, DialogTitle, DialogContent, DialogActions, Table, TableBody, TableCell, TableContainer, TableHead, TableRow, IconButton, Snackbar, AppBar, Toolbar, Drawer, List, ListItem, ListItemIcon, ListItemText, createTheme, ThemeProvider } from '@mui/material'
import './styles/pixel-theme.css'
import { RadarChart, PolarGrid, PolarAngleAxis, PolarRadiusAxis, Radar, BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend } from 'recharts'
import html2canvas from 'html2canvas'
import html2pdf from 'html2pdf.js'
import ScienceIcon from '@mui/icons-material/Science'
import HomeIcon from '@mui/icons-material/Home'
import InfoIcon from '@mui/icons-material/Info'
import HelpIcon from '@mui/icons-material/Help'
import MenuIcon from '@mui/icons-material/Menu'
import AutorenewIcon from '@mui/icons-material/Autorenew'
import CloseIcon from '@mui/icons-material/Close'
import FemaleIcon from '@mui/icons-material/Female'
import Footer from './components/Footer'

// ‰ΩøÁî®ÈªëÁôΩÂÉèÁ¥†È£éÊ†ºÁöÑFooter

const MENU_ITEMS = [
  { icon: <HomeIcon />, text: 'È¶ñÈ°µ', href: '/index.html' },
  { icon: <ScienceIcon />, text: 'ËØÑÂàÜËØ¥Êòé', onClick: () => setOpenHelp(true) },
  { icon: <InfoIcon />, text: 'ÂÖ≥‰∫é', onClick: () => setOpenAbout(true) },
  { icon: <HelpIcon />, text: 'Â∏ÆÂä©', onClick: () => setOpenGuide(true) }
]

const RATING_OPTIONS = ['SSS', 'SS', 'S', 'Q', 'N', 'W']
const CATEGORIES = {
  'üë£ ÊÅãË∂≥': ['üßé Ë∑™Êãú', 'ü¶∂ Ë∂≥‰∫§', 'üëÉ ÈóªËÑö', 'üëÖ ËàîË∂≥(Êó†Âë≥)', 'üëÖ ËàîË∂≥(ÂéüÂë≥)', 'üß¶ ËàîË¢ú(Êó†Âë≥)', 'üß¶ ËàîË¢ú(ÂéüÂë≥)', 'ü§ê Ë¢úÂ†µÂò¥', 'üëû ËàîÈûã(Ë∞ÉÊïôÁî®)', 'üë† ËàîÈûã(Êà∑Â§ñÁ©ø)', 'üçΩÔ∏è Ë∂≥ÂñÇÈ£ü', 'üíß ÂñùÊ¥óËÑöÊ∞¥', 'üí¶ ÂñùÊ¥óË¢úÊ∞¥', 'üëÑ Ë∂≥Ê∑±Âñâ', 'ü¶µ Ë∏¢Êâì', 'ü¶∂ Ë£∏Ë∂≥Ë∏©Ë∏è', 'üë† È´òË∑üË∏©Ë∏è'],
  'üëë ÊÄßÂ•¥': ['üëÖ ËàîÈò¥', 'üëÑ ËàîËÇõ', 'üö´ Á¶ÅÊ≠¢Â∞ÑÁ≤æ', 'üé≠ Ëá™ÊÖ∞Ë°®Êºî', 'üîß Âô®ÂÖ∑ÊäòÁ£®', 'üí¶ ËàîÈ£üËá™Â∑±Á≤æÊ∂≤', 'üçë ËÇõÈó®ÊèíÂÖ•', '‚≠ïÔ∏è Êâ©ËÇõ', 'üï≥Ô∏è È©¨ÁúºÊèíÂÖ•', 'üé† Êú®È©¨', 'üçÜ Èò≥ÂÖ∑ÊèíÂÖ•'],
  'üêï ÁãóÂ•¥': ['üêæ ÁãóÂßø', 'üìø È°πÂúà', '‚õìÔ∏è Èï£Èìê', 'üè† ÁúãÈó®', 'üêæ ÁãóÁà¨', 'ü¶Æ ÂÆ§ÂÜÖÈÅõÁãó', 'üí¶ ÁãóÊííÂ∞ø', 'üëÖ ÁãóËàîÈ£ü', 'üçΩÔ∏è Âè£ÂêêÈ£ü', 'üíß Âè£Ê∞¥', 'ü•Ñ Áó∞ÁõÇ', 'üé≠ ÁãóË£Ö', 'üê∂ ÁãóÂè´', 'üëô ÂÜÖË£§Â•óÂ§¥', 'üëÉ ËàîÂÜÖË£§ÔºàÂéüÂë≥Ôºâ', 'üö¨ ÁÉüÁÅ∞Áº∏', 'üîí ÁãóÁ¨ºÂÖ≥Êäº', '‚õìÔ∏è ÂúàÁ¶ÅÈ•≤ÂÖª', 'üé† È™ëÈ©¨'],
  'üéé ÊÄßÁé©ÂÖ∑': ['üé≠ ËßíËâ≤ÊâÆÊºî', 'üíç ‰π≥ÁéØ', '‚≠ïÔ∏è ÈæüÂ§¥ÁéØ', 'üí´ ËÇõÁéØ', 'üîí Ë¥ûÊìçÈîÅ', 'üîå ËÇõÂ°û', '‚úçÔ∏è Ë∫´‰∏äÂÜôÂ≠óÔºàÂèØÊ¥óÔºâ', 'üìù Ë∫´‰∏äÂÜôÂ≠óÔºà‰∏çÊ¥óÔºâ', 'üëó CDÂºÇË£Ö', '‚úÇÔ∏è ÂâÉÂÖâÂ§¥', 'ü™í ÂâÉÊØõ', 'üîß ÊÄßÂ∑•ÂÖ∑Áé©ÂºÑ', 'ü™ë Âõ∫ÂÆöÂú®Ê°åÊ§Ö‰∏ä', 'üë§ ÂùêËÑ∏', 'üíß ÁÅåËÇ†ÔºàÊ∏©ÂíåÊ∂≤‰ΩìÔºâ', '‚ö°Ô∏è ÁÅåËÇ†ÔºàÂà∫ÊøÄÊ∂≤‰ΩìÔºâ', 'üì∏ ÊãçÁÖß/ÂΩïÂÉèÔºàÈú≤ËÑ∏Ôºâ', 'üì∑ ÊãçÁÖß/ÂΩïÂÉèÔºà‰∏çÈú≤ËÑ∏Ôºâ', 'üéØ ‰Ωú‰∏∫Áé©ÂÖ∑', 'ü™ë ‰Ωú‰∏∫ÂÆ∂ÂÖ∑', 'üëî ‰Ωú‰∏∫Áî∑‰ªÜ'],
  'üêæ ÂÖΩÂ•¥': ['üêï ÂÖΩ‰∫§', 'üê∫ Áæ§ÂÖΩËΩÆ‰∫§', 'ü¶Å ÂÖΩËôê', 'üêú ÊòÜËô´Áà¨Ë∫´'],
  'üå≤ ÈáéÂ•¥': ['üå≥ ÈáéÂ§ñÂ•¥ÂΩπ', 'üèÉ ÈáéÂ§ñÊµÅÊîæ', 'üåø ÈáéÂ§ñÁé©ÂºÑ', 'üëÄ ÂÖ¨ÂÖ±Âú∫ÂêàÊö¥Èú≤', 'üèõÔ∏è ÂÖ¨ÂÖ±Âú∫ÂêàÁé©ÂºÑ', '‚õìÔ∏è ÂÖ¨ÂÖ±Âú∫ÂêàÊçÜÁªë', 'üîß ÂÖ¨ÂÖ±Âú∫ÂêàÂô®ÂÖ∑', 'üîí Ë¥ûÊìçÈîÅ', 'üë• Èú≤Èò≥(ÁÜü‰∫∫)', 'üëÄ Èú≤Èò≥(Áîü‰∫∫)', 'üêï ÈáéÂ§ñÈÅõÁãó'],
  '‚öîÔ∏è ÂàëÂ•¥': ['üëã ËÄ≥ÂÖâ', 'üéã Ëó§Êù°ÊäΩÊâì', 'üéØ Èû≠Êâì', 'ü™µ Êú®ÊùøÊãçÊâì', 'üñåÔ∏è ÊØõÂà∑', 'üëä Êã≥ËÑö', 'ü§ê Âè£Â°û', '‚õìÔ∏è ÂêäÁºö', 'üîí ÊãòÊùü', 'üîó ÊçÜÁªë', 'üòÆ‚Äçüí® ÊéßÂà∂ÂëºÂê∏', 'üìé ‰π≥Â§π', '‚öñÔ∏è ‰π≥Â§¥ÊâøÈáç', 'üîó Èò¥ËåéÂ§πÂ≠ê', 'üìé Èò¥ÂõäÂ§πÂ≠ê', '‚öñÔ∏è Èò¥ËåéÂêäÈáçÁâ©', '‚öñÔ∏è Èò¥ÂõäÂêäÈáçÁâ©', 'üéØ Èû≠ÊâìÈò≥ÂÖ∑', 'ü¶∂ Ë∏¢Ë£Ü', 'ü™∂ ÁòôÁóí', '‚ö°Ô∏è ÁîµÂáª', 'üïØÔ∏è ‰ΩéÊ∏©Êª¥Ëú°', 'üî• È´òÊ∏©Êª¥Ëú°', 'üìç ÈíàÂà∫', 'üíâ Á©øÂ≠î', 'üëä ‰ΩìÁΩö', 'ü§ê Êú®‰πÉ‰ºä', 'üíß Ê∞¥Âàë', 'üî• ÁÅ´Âàë', 'üßä ÂÜ∞Âùó', 'üî• ÁÉôÂç∞', '‚úÇÔ∏è Ë∫´‰ΩìÊîπÈÄ†', '‚úÇÔ∏è ÈòâÂâ≤'],
  'üí≠ ÂøÉÂ•¥': ['üó£Ô∏è ËØ≠Ë®Ä‰æÆËæ±', 'üó£Ô∏è ËØ≠Ë®Ä‰æÆËæ±', 'üòà ‰∫∫Ê†º‰æÆËæ±', 'üß† ÊÄùÁª¥ÊéßÂà∂', 'üåê ÁΩëÁªúÊéßÂà∂', 'üì¢ ÁΩëÁªúÂÖ¨Ë∞É'],
  'üè† ÂÆ∂Â•¥': ['‚è±Ô∏è Áü≠ÊúüÂúàÂÖª', 'üìÖ ÈïøÊúüÂúàÂÖª', 'üë• Â§öÂ•¥Ë∞ÉÊïô', 'üëë Â§ö‰∏ªË∞ÉÊïô', 'üë• ÁÜü‰∫∫ÊóÅËßÇ', 'üëÄ Áîü‰∫∫ÊóÅËßÇ', 'üòà ÁÜü‰∫∫‰æÆËæ±', 'üó£Ô∏è Áîü‰∫∫‰æÆËæ±', 'üò¥ Ââ•Â§∫Áù°Áú†', 'üåÄ ÂÇ¨Áú†', 'üßπ ÂÆ∂Âä°', 'üëî ‰º∫ÂÄô'],
  'üöΩ ÂéïÂ•¥': ['üöΩ ‰º∫ÂÄôÂ∞è‰æø', 'üöΩ ‰º∫ÂÄôÂ§ß‰æø', 'üöø Âú£Ê∞¥Êµ¥', 'üíß ÂñùÂú£Ê∞¥', 'üçΩÔ∏è Âú£Ê∞¥È£üÁâ©', 'üßª ËàîËàêÂéïÁ∫∏', 'üõÅ ÈªÑÈáëÊµ¥', 'üçΩÔ∏è ÂêÉÈªÑÈáë', 'üßπ Ê∏ÖÊ¥ÅÈ©¨Ê°∂', 'ü©∏ ÂêÉÁ∫¢Èáë', 'üíâ Â∞øÊ∂≤ÁÅåËÇ†']
}

const theme = createTheme({
  palette: {
    primary: {
      main: '#6200ea',
      light: '#9d46ff',
      dark: '#0a00b6',
    },
    secondary: {
      main: '#ff4081',
      light: '#ff79b0',
      dark: '#c60055',
    },
    background: {
      default: '#f8f9fa',
      paper: '#ffffff',
    },
    text: {
      primary: '#2c3e50',
      secondary: '#546e7a',
    },
  },
  typography: {
    h3: {
      fontWeight: 700,
      marginBottom: '2rem',
      letterSpacing: '-0.5px',
      color: '#1a237e',
    },
    subtitle1: {
      color: 'text.secondary',
      marginBottom: '2.5rem',
      fontSize: '1.1rem',
    },
    h5: {
      fontWeight: 600,
      marginBottom: '1.5rem',
      color: '#303f9f',
    },
  },
  components: {
    MuiPaper: {
      styleOverrides: {
        root: {
          transition: 'all 0.3s cubic-bezier(0.4, 0, 0.2, 1)',
          borderRadius: '12px',
          '&:hover': {
            boxShadow: '0 12px 24px rgba(0,0,0,0.1)',
            transform: 'translateY(-4px)',
          },
        },
      },
    },
    MuiSelect: {
      styleOverrides: {
        root: {
          backgroundColor: '#fff',
          borderRadius: '8px',
          '&:hover': {
            backgroundColor: '#f5f5f5',
          },
        },
      },
    },
    MuiButton: {
      styleOverrides: {
        root: {
          borderRadius: '8px',
          textTransform: 'none',
          fontWeight: 600,
          padding: '8px 24px',
          transition: 'all 0.2s ease-in-out',
          '&:hover': {
            transform: 'translateY(-2px)',
            boxShadow: '0 6px 12px rgba(0,0,0,0.1)',
          },
        },
      },
    },
  },
})

function App() {
  const [ratings, setRatings] = useState({})
  const [openReport, setOpenReport] = useState(false)
  const [snackbarOpen, setSnackbarOpen] = useState(false)
  const [snackbarMessage, setSnackbarMessage] = useState('')
  const [mobileMenuOpen, setMobileMenuOpen] = useState(false)
  const [selectedBatchRating, setSelectedBatchRating] = useState('')
  const reportRef = useRef(null)

  const handleRatingChange = (category, item, value) => {
    setRatings(prev => ({
      ...prev,
      [`${category}-${item}`]: value
    }))
  }

  const getRating = (category, item) => {
    return ratings[`${category}-${item}`] || ''
  }

  const getRatingColor = (rating) => {
    switch(rating) {
      case 'SSS': return '#1E3D59' // Ê∑±Êµ∑Ëìù
      case 'SS': return '#2C5530'  // Ê∑±Ê£ÆÁªø
      case 'S': return '#37474F'   // Ê∑±ËìùÁÅ∞
      case 'Q': return '#455A64'   // ËìùÁÅ∞
      case 'N': return '#546E7A'   // ‰∏≠ËìùÁÅ∞
      case 'W': return '#607D8B'   // ÊµÖËìùÁÅ∞
      default: return '#90A4AE'    // ÊûÅÊµÖËìùÁÅ∞
    }
  }

  const getRadarData = () => {
    return Object.entries(CATEGORIES).map(([category]) => {
      const items = CATEGORIES[category]
      const categoryScores = items.map(item => {
        const rating = getRating(category, item)
        switch(rating) {
          case 'SSS': return 6
          case 'SS': return 5
          case 'S': return 4
          case 'Q': return 3
          case 'N': return 2
          case 'W': return 1
          default: return 0
        }
      })
      const avgScore = categoryScores.reduce((a, b) => a + b, 0) / items.length
      return {
        category,
        value: avgScore,
        fullMark: 6
      }
    })
  }

  const getBarData = (category) => {
    return CATEGORIES[category].map(item => ({
      name: item,
      value: (() => {
        const rating = getRating(category, item)
        switch(rating) {
          case 'SSS': return 6
          case 'SS': return 5
          case 'S': return 4
          case 'Q': return 3
          case 'N': return 2
          case 'W': return 1
          default: return 0
        }
      })()
    }))
  }

  const handleExportImage = async () => {
    if (reportRef.current) {
      try {
        const reportElement = reportRef.current;
        const isMobile = /iPhone|iPad|iPod|Android/i.test(navigator.userAgent);
        
        // ÂàõÂª∫‰∏Ä‰∏™Êñ∞ÁöÑÂÆπÂô®ÂÖÉÁ¥†
        const container = document.createElement('div');
        container.style.position = 'absolute';
        container.style.left = '-9999px';
        container.style.top = '-9999px';
        // Ê†πÊçÆËÆæÂ§áÁ±ªÂûãË∞ÉÊï¥ÂÆπÂô®ÂÆΩÂ∫¶
        container.style.width = isMobile ? '900px' : '1200px'; // ÁßªÂä®Á´Ø‰ΩøÁî®ËæÉÂ∞èÂÆΩÂ∫¶‰ª•‰ºòÂåñÊØî‰æã
        container.style.backgroundColor = '#ffffff';
        document.body.appendChild(container);

        // ÂÖãÈöÜÊä•ÂëäÂÖÉÁ¥†
        const clonedReport = reportElement.cloneNode(true);
        container.appendChild(clonedReport);

        // ‰øÆÊîπÂØºÂá∫ÂõæÁâáÁöÑÁΩëÊ†ºÂ∏ÉÂ±Ä‰∏∫ÊØèË°å3Âàó
        const optionsGrids = clonedReport.querySelectorAll('.options-grid');
        optionsGrids.forEach(grid => {
          grid.style.display = 'grid';
          grid.style.gridTemplateColumns = 'repeat(3, 1fr)';
          grid.style.gap = isMobile ? '0.8rem' : '1rem'; // ÁßªÂä®Á´ØÂáèÂ∞èÈó¥Ë∑ù
          grid.style.width = '100%';
          grid.style.margin = '0 auto';
          // Á°Æ‰øùÊØè‰∏™ÈÄâÈ°πÊúâË∂≥Â§üÁöÑÁ©∫Èó¥
          const optionItems = grid.querySelectorAll('.option-item');
          optionItems.forEach(item => {
            item.style.minWidth = '0';
            item.style.flexWrap = 'nowrap';
            item.style.overflow = 'hidden';
            item.style.fontSize = isMobile ? '1.5em' : '1.8em'; // ÁßªÂä®Á´ØÈÄÇÂΩìÂáèÂ∞èÂ≠ó‰Ωì
            // Ë∞ÉÊï¥ËØÑÂàÜÁ≠âÁ∫ßËØ¥ÊòéÁöÑÂ≠ó‰Ωì
            const ratingText = item.querySelector('.rating-text');
            if (ratingText) {
              ratingText.style.fontSize = isMobile ? '1.3em' : '1.6em';
            }
          });
        });

        // È¢ÑÂ§ÑÁêÜÂÖãÈöÜÁöÑÂÖÉÁ¥†
        const dialogElement = clonedReport.querySelector('[role="dialog"]');
        if (dialogElement) {
          dialogElement.style.position = 'relative';
          dialogElement.style.transform = 'none';
          dialogElement.style.top = '0';
          dialogElement.style.left = '0';
          dialogElement.style.width = '100%';
          dialogElement.style.height = 'auto';
          dialogElement.style.maxHeight = 'none';
          dialogElement.style.overflow = 'visible';
          dialogElement.style.display = 'block';
          dialogElement.style.margin = '0';
          dialogElement.style.padding = isMobile ? '1.5rem' : '2rem'; // ÁßªÂä®Á´ØÂáèÂ∞èÂÜÖËæπË∑ù
          dialogElement.style.boxSizing = 'border-box';

          // Ë∞ÉÊï¥Ê†áÈ¢òÂ≠ó‰Ωì
          const titles = dialogElement.querySelectorAll('.section-title');
          titles.forEach(title => {
            title.style.fontSize = isMobile ? '1.8em' : '2.2em'; // ÁßªÂä®Á´ØÈÄÇÂΩìÂáèÂ∞èÊ†áÈ¢òÂ≠ó‰Ωì
          });

          // Ë∞ÉÊï¥ÂõæË°®Â≠ó‰Ωì
          const charts = dialogElement.querySelectorAll('.recharts-text');
          charts.forEach(text => {
            text.style.fontSize = isMobile ? '1.4em' : '1.6em'; // ÁßªÂä®Á´ØÈÄÇÂΩìÂáèÂ∞èÂõæË°®Â≠ó‰Ωì
          });
        }

        // Á°Æ‰øùÊâÄÊúâÂõæË°®ÈÉΩÂ∑≤Ê∏≤Êüì
        await new Promise(resolve => setTimeout(resolve, 800)); // Â¢ûÂä†Á≠âÂæÖÊó∂Èó¥Á°Æ‰øùÂõæË°®ÂÆåÂÖ®Ê∏≤Êüì

        // È¢ÑÂä†ËΩΩ‰∫åÁª¥Á†ÅÂõæÁâá
        await new Promise((resolve) => {
          const img = new Image();
          img.onload = () => resolve();
          img.onerror = () => {
            console.error('QR code image failed to load');
            resolve();
          };
          img.src = '/qrcode.png';
          // Á°Æ‰øùÂõæÁâáÂÆåÂÖ®Âä†ËΩΩ
          if (img.complete) {
            resolve();
          }
        });

        const canvas = await html2canvas(container, {
          scale: isMobile ? 3 : 2, // ÁßªÂä®Á´ØÊèêÈ´òscaleÂÄº‰ª•Â¢ûÂä†Ê∏ÖÊô∞Â∫¶
          useCORS: true,
          allowTaint: true,
          logging: true, // ÂêØÁî®Êó•Âøó‰ª•‰æøË∞ÉËØï
          backgroundColor: '#ffffff',
          imageTimeout: 15000, // Â¢ûÂä†ÂõæÁâáÂä†ËΩΩË∂ÖÊó∂Êó∂Èó¥
          width: container.offsetWidth, // Á°Æ‰øù‰ΩøÁî®ÂÆûÈôÖÂÆΩÂ∫¶
          height: container.offsetHeight, // Á°Æ‰øù‰ΩøÁî®ÂÆûÈôÖÈ´òÂ∫¶
          onclone: (clonedDoc) => {
            const charts = clonedDoc.querySelectorAll('.recharts-wrapper');
            charts.forEach(chart => {
              chart.style.width = '100%';
              chart.style.height = 'auto';
            });
            
            // Á°Æ‰øù‰∫åÁª¥Á†ÅÂõæÁâáËÉΩÂ§üË¢´Ê≠£Á°ÆÊ∏≤Êüì
            const qrCodeImages = clonedDoc.querySelectorAll('img[alt="QR Code"]');
            qrCodeImages.forEach(img => {
              // Á°Æ‰øùÂõæÁâáÂ∑≤Âä†ËΩΩÂπ∂ÂèØËßÅ
              if (img.src.includes('/qrcode.png')) {
                img.style.visibility = 'visible';
                img.style.display = 'block';
                // Âº∫Âà∂ËÆæÁΩÆÂõæÁâáÊ∫ê‰∏∫ÁªùÂØπË∑ØÂæÑ
                const absolutePath = new URL('/qrcode.png', window.location.origin).href;
                img.src = absolutePath;
                // Á°Æ‰øùÂõæÁâáÂ∞∫ÂØ∏Ê≠£Á°Æ
                img.width = 200;
                img.height = 200;
              }
            });
          }
        });

        // Ê∏ÖÁêÜ‰∏¥Êó∂ÂÖÉÁ¥†
        document.body.removeChild(container);
        
        // ‰ºòÂåñÂõæÁâáË¥®Èáè - Â∞ÜCanvasËΩ¨Êç¢‰∏∫È´òË¥®ÈáèBlobÂØπË±°
        const blob = await new Promise(resolve => {
          canvas.toBlob(resolve, 'image/png', 1.0) // ‰ΩøÁî®ÊúÄÈ´òË¥®Èáè
        })

        // Â∑≤Âú®ÂâçÈù¢ÂÆö‰πâ‰∫ÜisMobileÂèòÈáè

        if (isMobile) {
          try {
            // ÊñπÊ≥ï1: Â∞ùËØï‰ΩøÁî®Web Share API (ÊúÄÁé∞‰ª£ÁöÑÊñπÊ≥ï)
            if (navigator.share && navigator.canShare) {
              const file = new File([blob], 'Áî∑MËá™ËØÑÊä•Âëä.png', { type: 'image/png' })
              const shareData = { files: [file] }
              
              if (navigator.canShare(shareData)) {
                await navigator.share(shareData)
                setSnackbarMessage('ÂõæÁâáÂ∑≤ÂáÜÂ§áÂ•ΩÂàÜ‰∫´ÔºÅ')
                setSnackbarOpen(true)
                return
              }
            }

            // ÊñπÊ≥ï2: Â∞ùËØï‰ΩøÁî®FileSaver.js
            try {
              const FileSaver = await import('file-saver');
              FileSaver.saveAs(blob, 'Áî∑MËá™ËØÑÊä•Âëä.png');
              setSnackbarMessage('Êä•ÂëäÂ∑≤‰øùÂ≠òÂà∞Áõ∏ÂÜåÔºÅ');
              setSnackbarOpen(true);
              return;
            } catch (error) {
              console.error('FileSaver error:', error);
            }

            // ÊñπÊ≥ï3: Â∞ùËØï‰ΩøÁî®‰º†Áªü‰∏ãËΩΩÊñπÊ≥ï - ÂàõÂª∫‰∏¥Êó∂ÈìæÊé•
            try {
              const url = URL.createObjectURL(blob);
              const link = document.createElement('a');
              link.href = url;
              link.download = 'Áî∑MËá™ËØÑÊä•Âëä.png';
              // Âú®iOS‰∏äÔºåÈúÄË¶ÅÂ∞ÜÈìæÊé•Ê∑ªÂä†Âà∞DOMÂπ∂Ê®°ÊãüÁÇπÂáª
              document.body.appendChild(link);
              link.click();
              // ÁªôË∂≥Â§üÁöÑÊó∂Èó¥ËÆ©ÊµèËßàÂô®Â§ÑÁêÜ‰∏ãËΩΩ
              setTimeout(() => {
                document.body.removeChild(link);
                URL.revokeObjectURL(url);
              }, 1000);
              setSnackbarMessage('Êä•ÂëäÂ∑≤‰øùÂ≠ò‰∏∫ÂõæÁâáÔºÅ');
              setSnackbarOpen(true);
              return;
            } catch (downloadError) {
              console.error('Traditional download error:', downloadError);
            }

            // ÊñπÊ≥ï4: Â∞ùËØï‰ΩøÁî®data URLÊñπÊ≥ï (ÈÄÇÁî®‰∫éÊüê‰∫õÁßªÂä®ÊµèËßàÂô®)
            try {
              const dataUrl = canvas.toDataURL('image/png');
              const link = document.createElement('a');
              link.href = dataUrl;
              link.download = 'Áî∑MËá™ËØÑÊä•Âëä.png';
              link.target = '_blank'; // Âú®Êñ∞Ê†áÁ≠æÈ°µÊâìÂºÄÂèØËÉΩÊúâÂä©‰∫éÊüê‰∫õÁßªÂä®ÊµèËßàÂô®
              document.body.appendChild(link);
              link.click();
              setTimeout(() => document.body.removeChild(link), 1000);
              setSnackbarMessage('Êä•ÂëäÂ∑≤‰øùÂ≠ò‰∏∫È´òÊ∏ÖÂõæÁâáÔºÅ');
              setSnackbarOpen(true);
              return;
            } catch (dataUrlError) {
              console.error('Data URL error:', dataUrlError);
            }

            // ÊâÄÊúâÊñπÊ≥ïÈÉΩÂ§±Ë¥•Êó∂ÁöÑÊèêÁ§∫
            setSnackbarMessage('‰øùÂ≠òÂõæÁâáÂ§±Ë¥•ÔºåËØ∑Â∞ùËØï‰ΩøÁî®‰øùÂ≠ò‰∏∫PDFÂäüËÉΩÔºÅ');
            setSnackbarOpen(true);
          } catch (error) {
            console.error('‰øùÂ≠òÂõæÁâáÈîôËØØ:', error);
            setSnackbarMessage('‰øùÂ≠òÂõæÁâáÂ§±Ë¥•ÔºåËØ∑Â∞ùËØï‰ΩøÁî®‰øùÂ≠ò‰∏∫PDFÂäüËÉΩÔºÅ');
            setSnackbarOpen(true);
          }
        } else {
          // Ê°åÈù¢Á´Ø‰ΩøÁî®‰º†Áªü‰∏ãËΩΩÊñπÊ≥ï
          const url = URL.createObjectURL(blob);
          const link = document.createElement('a');
          link.href = url;
          link.download = 'Áî∑MËá™ËØÑÊä•Âëä.png';
          link.click();
          URL.revokeObjectURL(url);
          setSnackbarMessage('Êä•ÂëäÂ∑≤‰øùÂ≠ò‰∏∫È´òÊ∏ÖÂõæÁâáÔºÅ')
          setSnackbarOpen(true)
        }
      } catch (error) {
        console.error('ÂØºÂá∫ÂõæÁâáÈîôËØØ:', error)
        setSnackbarMessage('ÂØºÂá∫ÂõæÁâáÂ§±Ë¥•ÔºåËØ∑ÈáçËØï')
        setSnackbarOpen(true)
      }
    }
  }

  const handleExportPDF = async () => {
    if (reportRef.current) {
      try {
        const element = reportRef.current
        const opt = {
          margin: 1,
          filename: 'Áî∑MËá™ËØÑÊä•Âëä.pdf',
          image: { type: 'jpeg', quality: 0.98 },
          html2canvas: { scale: 2 },
          jsPDF: { unit: 'in', format: 'a4', orientation: 'portrait' }
        }
        await html2pdf().set(opt).from(element).save()
        setSnackbarMessage('Êä•ÂëäÂ∑≤ÊàêÂäü‰øùÂ≠ò‰∏∫PDFÔºÅ')
        setSnackbarOpen(true)
      } catch (error) {
        setSnackbarMessage('ÂØºÂá∫PDFÂ§±Ë¥•ÔºåËØ∑ÈáçËØï')
        setSnackbarOpen(true)
      }
    }
  }

  const handleSetAllRating = (category, rating) => {
    const items = CATEGORIES[category]
    const newRatings = { ...ratings }
    items.forEach(item => {
      newRatings[`${category}-${item}`] = rating
    })
    setRatings(newRatings)
    setSnackbarMessage(`Â∑≤Â∞Ü${category}Á±ªÂà´‰∏ãÊâÄÊúâÈÄâÈ°πËÆæÁΩÆ‰∏∫${rating}`)
    setSnackbarOpen(true)
  }

  const handleShareToWeChat = async () => {
    try {
      // Ê£ÄÊü•ÊòØÂê¶ÊîØÊåÅWeb Share API
      if (!navigator.share) {
        setSnackbarMessage('ÊÇ®ÁöÑÊµèËßàÂô®‰∏çÊîØÊåÅÂàÜ‰∫´ÂäüËÉΩ')
        setSnackbarOpen(true)
        return
      }

      // Ê£ÄÊü•ÊòØÂê¶ÊîØÊåÅÂàÜ‰∫´Êñá‰ª∂
      const canShareFiles = navigator.canShare && await reportRef.current

      if (canShareFiles) {
        // Â∞ùËØïÂàÜ‰∫´Â∏¶ÊúâÊñá‰ª∂ÁöÑÂÜÖÂÆπ
        try {
          const canvas = await html2canvas(reportRef.current)
          const blob = await new Promise(resolve => canvas.toBlob(resolve, 'image/png', 1.0))
          const file = new File([blob], 'Áî∑MËá™ËØÑÊä•Âëä.png', { type: 'image/png' })
          const shareData = {
            title: 'Áî∑MËá™ËØÑÊä•Âëä',
            text: 'Êü•ÁúãÊàëÁöÑÁî∑MËá™ËØÑÊä•Âëä',
            files: [file]
          }

          if (navigator.canShare(shareData)) {
            await navigator.share(shareData)
            setSnackbarMessage('ÂàÜ‰∫´ÊàêÂäüÔºÅ')
            setSnackbarOpen(true)
            return
          }
        } catch (error) {
          console.error('ÂàÜ‰∫´Êñá‰ª∂Â§±Ë¥•:', error)
        }
      }

      // Â¶ÇÊûúÊó†Ê≥ïÂàÜ‰∫´Êñá‰ª∂ÔºåÈÄÄÂõûÂà∞Âü∫Êú¨ÂàÜ‰∫´
      await navigator.share({
        title: 'Áî∑MËá™ËØÑÊä•Âëä',
        text: 'Êü•ÁúãÊàëÁöÑÁî∑MËá™ËØÑÊä•Âëä'
      })
      setSnackbarMessage('ÂàÜ‰∫´ÊàêÂäüÔºÅ')
      setSnackbarOpen(true)
    } catch (error) {
      console.error('ÂàÜ‰∫´Â§±Ë¥•:', error)
      if (error.name === 'AbortError') {
        setSnackbarMessage('ÂàÜ‰∫´Â∑≤ÂèñÊ∂à')
      } else {
        setSnackbarMessage('ÂàÜ‰∫´Â§±Ë¥•ÔºåËØ∑ÈáçËØï')
      }
      setSnackbarOpen(true)
    }
  }

  return (
    <ThemeProvider theme={theme}>
      <Box sx={{ 
        display: 'flex', 
        flexDirection: 'column',
        minHeight: '100vh'
      }}>

      <AppBar position="sticky" sx={{
        background: '#000',
        border: '2px solid #fff',
        borderStyle: 'double',
        boxShadow: 'none',
        '&::before': {
          content: '""',
          position: 'absolute',
          top: 0,
          left: 0,
          right: 0,
          bottom: 0,
          background: 'repeating-linear-gradient(0deg, #000 0px, #000 1px, transparent 1px, transparent 2px)',
          opacity: 0.1,
          pointerEvents: 'none'
        }
      }}>
        <Container maxWidth="lg">
          <Toolbar sx={{ 
            justifyContent: 'space-between', 
            alignItems: 'center',
            padding: { xs: '8px 16px', md: '8px 24px' },
            minHeight: { xs: '56px', md: '64px' },
            '& .MuiButton-root': {
              fontFamily: '"Press Start 2P", cursive',
              fontSize: '0.8rem',
              border: '2px solid #fff',
              '&:hover': {
                background: '#fff',
                color: '#000',
                transform: 'translateY(0)',
                boxShadow: 'none'
              }
            }
          }}>
            <Box sx={{ 
              display: 'flex', 
              alignItems: 'center',
              gap: 1,
              flex: '1 1 auto',
              justifyContent: 'flex-start',
              height: '100%'
            }}>
              <ScienceIcon sx={{ display: 'flex' }} />
              <Typography variant="h5" sx={{
                fontFamily: '"Press Start 2P", cursive',
                fontWeight: 'bold',
                color: 'white',
                display: 'flex',
                alignItems: 'center',
                margin: 0,
                padding: 0,
                lineHeight: 1,
                height: '100%',
                fontSize: '1rem',
                letterSpacing: '0.1em',
                textShadow: '2px 2px 0 #000, -2px -2px 0 #000, 2px -2px 0 #000, -2px 2px 0 #000'
              }}>
                M-Profile Lab
              </Typography>
            </Box>
                
            <Box sx={{ 
              display: { xs: 'none', md: 'flex' }, 
              gap: 2,
              flex: '1 1 auto',
              justifyContent: 'flex-end',
              '& .MuiButton-root': {
                border: '2px solid #fff',
                '&:hover': {
                  background: '#fff',
                  color: '#000'
                }
              }
            }}>              
              <Button color="inherit" startIcon={<HomeIcon />} href="/index.html">È¶ñÈ°µ</Button>
              <Button color="inherit" startIcon={<InfoIcon />}>ÂÖ≥‰∫é</Button>
              <Button color="inherit" startIcon={<HelpIcon />}>‰ΩøÁî®ÊåáÂçó</Button>
              <Button color="inherit" startIcon={<ScienceIcon />} href="/s.html">SÁâà</Button>
              <Button color="inherit" href="/female.html" startIcon={<FemaleIcon />}>Â•≥ÁîüÁâà</Button>
            </Box>

            <IconButton
              color="inherit"
              sx={{ 
                display: { xs: 'block', md: 'none' },
                border: '2px solid #fff',
                borderRadius: '4px',
                padding: '4px',
                '&:hover': {
                  background: '#fff',
                  color: '#000'
                }
              }}
              onClick={() => setMobileMenuOpen(true)}
            >
              <MenuIcon />
            </IconButton>
          </Toolbar>
        </Container>
      </AppBar>

      <Drawer
        anchor="right"
        open={mobileMenuOpen}
        onClose={() => setMobileMenuOpen(false)}
      >
        <Box sx={{ width: 250, pt: 2 }}>
          <List>

            <ListItem button component="a" href="/index.html" onClick={() => setMobileMenuOpen(false)}>
              <ListItemIcon><HomeIcon /></ListItemIcon>
              <ListItemText primary="È¶ñÈ°µ" />
            </ListItem>
            <ListItem button onClick={() => setMobileMenuOpen(false)}>
              <ListItemIcon><InfoIcon /></ListItemIcon>
              <ListItemText primary="ÂÖ≥‰∫é" />
            </ListItem>
            <ListItem button onClick={() => setMobileMenuOpen(false)}>
              <ListItemIcon><HelpIcon /></ListItemIcon>
              <ListItemText primary="‰ΩøÁî®ÊåáÂçó" />
            </ListItem>
            <ListItem button component="a" href="/female.html">
              <ListItemText primary="Â•≥ÊÄßÁâà" />
            </ListItem>
          </List>
        </Box>
      </Drawer>

      <Container maxWidth="lg" sx={{
        py: 8,
        minHeight: '100vh',
        display: 'flex',
        flexDirection: 'column',
        gap: 5,
        animation: 'fadeIn 0.6s ease-in-out',
        '@keyframes fadeIn': {
          from: { opacity: 0, transform: 'translateY(20px)' },
          to: { opacity: 1, transform: 'translateY(0)' }
        }
      }}>
        <Box sx={{ textAlign: 'center', mb: 4 }}>
          <Typography variant="h3" component="h1" sx={{ fontWeight: 'bold', color: 'black' }}>
            Áî∑MËá™ËØÑÊä•Âëä
          </Typography>
          <Paper elevation={1} sx={{ 
            mt: 2, 
            p: 2, 
            borderRadius: 2,
            backgroundColor: 'rgba(255, 255, 255, 0.9)',
            maxWidth: { xs: '100%', md: '80%' },
            mx: 'auto'
          }}>
            <Typography variant="subtitle2" sx={{ fontWeight: 'bold', mb: 1, color: '#000000', textAlign: 'center' }}>
              ËØÑÂàÜÁ≠âÁ∫ßËØ¥Êòé
            </Typography>
            <Box sx={{ display: 'flex', flexWrap: 'wrap', justifyContent: 'center', gap: { xs: 1, md: 2 } }}>
              <Typography variant="body2" sx={{ fontSize: '0.9rem' }}>
                <Box component="span" sx={{ fontWeight: 'bold', color: '#FF1493' }}>SSS</Box> = ÈùûÂ∏∏ÂñúÊ¨¢
              </Typography>
              <Typography variant="body2" sx={{ fontSize: '0.9rem' }}>
                <Box component="span" sx={{ fontWeight: 'bold', color: '#FF69B4' }}>SS</Box> = ÂñúÊ¨¢
              </Typography>
              <Typography variant="body2" sx={{ fontSize: '0.9rem' }}>
                <Box component="span" sx={{ fontWeight: 'bold', color: '#87CEEB' }}>S</Box> = Êé•Âèó
              </Typography>
              <Typography variant="body2" sx={{ fontSize: '0.9rem' }}>
                <Box component="span" sx={{ fontWeight: 'bold', color: '#FFD700' }}>Q</Box> = ‰∏çÂñúÊ¨¢‰ΩÜ‰ºöÂÅö
              </Typography>
              <Typography variant="body2" sx={{ fontSize: '0.9rem' }}>
                <Box component="span" sx={{ fontWeight: 'bold', color: '#FF4500' }}>N</Box> = ÊãíÁªù
              </Typography>
              <Typography variant="body2" sx={{ fontSize: '0.9rem' }}>
                <Box component="span" sx={{ fontWeight: 'bold', color: '#808080' }}>W</Box> = Êú™Áü•
              </Typography>
            </Box>
          </Paper>
          <Box sx={{ mt: 3, textAlign: 'center' }}>
            <Button
              variant="contained"
              size="large"
              startIcon={<AutorenewIcon />}
              className="pixel-button"
              sx={{ fontFamily: '"Press Start 2P", cursive' }}
              onClick={() => {
                const newRatings = {};
                Object.entries(CATEGORIES).forEach(([category, items]) => {
                  items.forEach(item => {
                    const randomIndex = Math.floor(Math.random() * RATING_OPTIONS.length);
                    newRatings[`${category}-${item}`] = RATING_OPTIONS[randomIndex];
                  });
                });
                setRatings(newRatings);
                setSnackbarMessage('Â∑≤ÂÆåÊàêÈöèÊú∫ÈÄâÊã©ÔºÅ');
                setSnackbarOpen(true);
              }}
            >
              ÈöèÊú∫ÈÄâÊã©
            </Button>
          </Box>
        </Box>
        
        {Object.entries(CATEGORIES).map(([category, items]) => (
          <Paper key={category} elevation={2} sx={{
            p: { xs: 3, md: 4 },
            borderRadius: 3,
            backgroundColor: 'background.paper',
            transition: 'all 0.3s ease',
            '&:hover': {
              transform: 'translateY(-4px)',
              boxShadow: '0 12px 24px rgba(0,0,0,0.1)'
            }
          }}>
            <Box sx={{ display: 'flex', alignItems: 'center', gap: 2, mb: 2 }}>
              <Typography variant="h5" sx={{ mb: 0, color: 'black' }}>
                {category}
              </Typography>
              <Select
                size="small"
                value={selectedBatchRating}
                onChange={(e) => {
                  handleSetAllRating(category, e.target.value)
                  setSelectedBatchRating('')
                }}
                displayEmpty
                placeholder="‰∏ÄÈîÆÈÄâÊã©"
                renderValue={(value) => value || "‰∏ÄÈîÆÈÄâÊã©"}
                sx={{ minWidth: 120 }}
              >
                <MenuItem value=""><em>‰∏ÄÈîÆÈÄâÊã©</em></MenuItem>
                {RATING_OPTIONS.map(rating => (
                  <MenuItem key={rating} value={rating}>{rating}</MenuItem>
                ))}
              </Select>
            </Box>
            <Grid container spacing={2} sx={{ mt: 0, width: '100%', margin: 0 }}>
              {items.map(item => (
                <Grid item xs={12} sm={6} md={4} key={item}>
                  <Box sx={{
                    display: 'flex',
                    alignItems: 'center',
                    justifyContent: 'space-between',
                    p: { xs: 1, md: 1.5 },
                    borderRadius: 2,
                    height: '100%',
                    backgroundColor: getRating(category, item) ? 
                      `${getRatingColor(getRating(category, item))}20` : // Ê∑ªÂä†20Ë°®Á§∫12.5%ÈÄèÊòéÂ∫¶
                      'background.paper',
                    boxShadow: getRating(category, item) ?
                      `0 1px 4px ${getRatingColor(getRating(category, item))}60` :
                      '0 1px 3px rgba(0,0,0,0.1)',
                    borderLeft: getRating(category, item) ?
                      `3px solid ${getRatingColor(getRating(category, item))}` :
                      'none',
                    transition: 'all 0.3s ease',
                    gap: 1,
                    '&:hover': {
                      backgroundColor: getRating(category, item) ? 
                        `${getRatingColor(getRating(category, item))}30` : // ÊÇ¨ÂÅúÊó∂Â¢ûÂä†ÈÄèÊòéÂ∫¶Âà∞Á∫¶18.75%
                        'rgba(98, 0, 234, 0.04)',
                      transform: 'translateX(4px)',
                      boxShadow: getRating(category, item) ?
                        `0 2px 8px ${getRatingColor(getRating(category, item))}80` :
                        '0 2px 6px rgba(0,0,0,0.15)',
                    },
                  }}>
                    <Box sx={{ 
                      display: 'flex',
                      alignItems: 'center',
                      flexGrow: 1,
                      minWidth: 0
                    }}>
                    <Typography sx={{ 
                      fontWeight: 500, 
                      color: getRating(category, item) ? 
                        `${getRatingColor(getRating(category, item))}` : 
                        'text.primary',
                      fontSize: { xs: '0.85rem', md: '1rem' },
                      overflow: 'hidden',
                      textOverflow: 'ellipsis',
                      whiteSpace: 'nowrap',
                      transition: 'color 0.3s ease'
                    }}>{item}</Typography>
                    </Box>
                    <Select
                      size="small"
                      value={getRating(category, item)}
                      onChange={(e) => handleRatingChange(category, item, e.target.value)}
                      sx={{ 
                        minWidth: { xs: 100, md: 120 },
                        '.MuiSelect-select': {
                          py: 1.5,
                          px: 2,
                          color: getRating(category, item) ? getRatingColor(getRating(category, item)) : 'inherit'
                        },
                        '& .MuiOutlinedInput-notchedOutline': {
                          borderColor: getRating(category, item) ? `${getRatingColor(getRating(category, item))}80` : 'rgba(0, 0, 0, 0.23)',
                          transition: 'border-color 0.3s ease'
                        },
                        '&:hover .MuiOutlinedInput-notchedOutline': {
                          borderColor: getRating(category, item) ? getRatingColor(getRating(category, item)) : 'rgba(0, 0, 0, 0.23)'
                        },
                        '&.Mui-focused .MuiOutlinedInput-notchedOutline': {
                          borderColor: getRating(category, item) ? getRatingColor(getRating(category, item)) : 'primary.main'
                        }
                      }}
                    >
                      <MenuItem value=""><em>ËØ∑ÈÄâÊã©</em></MenuItem>
                      {RATING_OPTIONS.map(rating => (
                        <MenuItem key={rating} value={rating}>{rating}</MenuItem>
                      ))}
                    </Select>
                  </Box>
                </Grid>
              ))}
            </Grid>
          </Paper>
        ))}

        <Box sx={{ display: 'flex', flexDirection: 'column', alignItems: 'center', mt: 4, gap: 4 }}>
          <Button
            variant="contained"
            color="primary"
            size="large"
            onClick={() => setOpenReport(true)}
            className="pixel-button"
            sx={{ minWidth: 200 }}
          >
            ÁîüÊàêÊä•Âëä
          </Button>
          <Paper elevation={2} sx={{
            p: 3,
            borderRadius: 2,
            textAlign: 'center',
            maxWidth: 300,
            mx: 'auto',
            backgroundColor: 'white'
          }}>
            <Typography variant="subtitle1" sx={{
              fontWeight: 'bold',
              color: 'primary.main',
              mb: 2
            }}>
              Êâ´Á†ÅÈ¢ÜÂèñÊÇ®ÁöÑXPÊä•Âëä
            </Typography>
            <Box component="img" src="/qrcode.png" alt="QR Code" sx={{
              width: '200px',
              height: '200px',
              display: 'block',
              margin: '0 auto'
            }} />
          </Paper>
        </Box>

        <Dialog
          open={openReport}
          onClose={() => setOpenReport(false)}
          maxWidth="md"
          fullWidth
          PaperProps={{
            sx: {
              minHeight: { xs: '95vh', md: 'auto' },
              maxHeight: { xs: '95vh', md: '90vh' },
              overflowY: 'auto',
              m: { xs: 1, sm: 2 },
              width: '100%',
              maxWidth: { sm: '800px' },
              mx: 'auto',
              backgroundColor: '#fafafa',
              '@media print': {
                height: 'auto',
                maxHeight: 'none',
                overflow: 'visible'
              }
            }
          }}
        >
          <DialogTitle sx={{ 
            textAlign: 'center', 
            fontWeight: 'bold', 
            pt: { xs: 4, md: 5 },
            mt: { xs: 2, md: 3 },
            color: 'black',
            borderBottom: '2px solid #6200ea',
            mb: 2
          }}>
            Áî∑MËá™ËØÑËØ¶ÁªÜÊä•Âëä
          </DialogTitle>
          <DialogContent ref={reportRef} sx={{ 
            px: 4, 
            py: 3,
            display: 'flex',
            flexDirection: 'column',
            gap: 4,
            '@media print': {
              overflow: 'visible',
              height: 'auto'
            }
          }}>
            <Box sx={{ maxWidth: '100%', overflow: 'hidden' }}>
              <Typography variant="h6" gutterBottom sx={{ 
                color: 'primary.main', 
                textAlign: 'center', 
                fontSize: { xs: '1.1rem', md: '1.2rem' },
                fontWeight: 'bold',
                mb: 3,
                mt: { xs: 3, md: 4 }
              }}>
                Áî∑MËá™ËØÑÊÄª‰ΩìËØÑÂàÜÂàÜÂ∏É
              </Typography>
              <Box sx={{
                width: '100%',
                height: { xs: 260, sm: 280, md: 300 },
                position: 'relative',
                mb: 4,
                display: 'flex',
                justifyContent: 'center',
                alignItems: 'center',
                '@media print': {
                  height: 300,
                  overflow: 'visible'
                }
              }}>
                <RadarChart
                  width={500}
                  height={300}
                  data={getRadarData()}
                  style={{ maxWidth: '100%', width: '100%', height: '100%' }}
                >
                  <PolarGrid stroke="#e0e0e0" />
                  <PolarAngleAxis
                    dataKey="category"
                    tick={{
                      fill: '#2c3e50',
                      fontSize: window.innerWidth < 600 ? 9 : 12
                    }}
                  />
                  <PolarRadiusAxis angle={30} domain={[0, 6]} tick={{ fill: '#2c3e50' }} />
                  <Radar name="ËØÑÂàÜ" dataKey="value" stroke="#6200ea" fill="#6200ea" fillOpacity={0.6} animationDuration={500} />
                  <Radar name="Êª°ÂàÜ" dataKey="fullMark" stroke="#ddd" strokeDasharray="3 3" fill="none" />
                  <Tooltip />
                  <Legend wrapperStyle={{ fontSize: window.innerWidth < 600 ? 10 : 12 }} />
                </RadarChart>
              </Box>
              <Paper elevation={2} sx={{ 
                mt: 4, 
                p: 3, 
                borderRadius: 2,
                backgroundColor: 'white',
                maxWidth: '100%',
                mx: 'auto',
                boxShadow: '0 2px 8px rgba(0,0,0,0.1)'
              }}>
                <Typography variant="subtitle1" sx={{ 
                  fontWeight: 'bold', 
                  mb: 2, 
                  color: 'primary.main', 
                  textAlign: 'center',
                  fontSize: '1rem'
                }}>
                  ËØÑÂàÜÁ≠âÁ∫ßËØ¥Êòé
                </Typography>
                <Box sx={{ display: 'flex', flexWrap: 'wrap', justifyContent: 'center', gap: { xs: 1, md: 2 } }}>
                  <Typography variant="body2" sx={{ fontSize: '0.9rem' }}>
                    <Box component="span" sx={{ fontWeight: 'bold', color: '#FF1493' }}>SSS</Box> = ÈùûÂ∏∏ÂñúÊ¨¢
                  </Typography>
                  <Typography variant="body2" sx={{ fontSize: '0.9rem' }}>
                    <Box component="span" sx={{ fontWeight: 'bold', color: '#FF69B4' }}>SS</Box> = ÂñúÊ¨¢
                  </Typography>
                  <Typography variant="body2" sx={{ fontSize: '0.9rem' }}>
                    <Box component="span" sx={{ fontWeight: 'bold', color: '#87CEEB' }}>S</Box> = Êé•Âèó
                  </Typography>
                  <Typography variant="body2" sx={{ fontSize: '0.9rem' }}>
                    <Box component="span" sx={{ fontWeight: 'bold', color: '#FFD700' }}>Q</Box> = ‰∏çÂñúÊ¨¢‰ΩÜ‰ºöÂÅö
                  </Typography>
                  <Typography variant="body2" sx={{ fontSize: '0.9rem' }}>
                    <Box component="span" sx={{ fontWeight: 'bold', color: '#FF4500' }}>N</Box> = ÊãíÁªù
                  </Typography>
                  <Typography variant="body2" sx={{ fontSize: '0.9rem' }}>
                    <Box component="span" sx={{ fontWeight: 'bold', color: '#808080' }}>W</Box> = Êú™Áü•
                  </Typography>
                </Box>
              </Paper>
            </Box>
            {Object.entries(CATEGORIES).map(([category, items]) => (
              <Box key={category} sx={{ mb: 2, maxWidth: '100%' }}>
                <Typography variant="h6" gutterBottom sx={{
                  color: 'black',
                  textAlign: 'center',
                  borderBottom: '2px solid #6200ea',
                  pb: 0.5,
                  mb: 1.5,
                  fontSize: { xs: '1rem', md: '1.1rem' }
                }}>
                  {category}
                </Typography>
                <Grid container spacing={1.5} justifyContent="center">
                  {items
                    .filter(item => getRating(category, item))
                    .sort((a, b) => {
                      const ratingOrder = { 'SSS': 0, 'SS': 1, 'S': 2, 'Q': 3, 'N': 4, 'W': 5 };
                      return ratingOrder[getRating(category, a)] - ratingOrder[getRating(category, b)];
                    })
                    .map(item => (
                    <Grid item xs={6} sm={4} key={item}>
                      <Paper elevation={1} sx={{
                        p: 1,
                        display: 'flex',
                        justifyContent: 'space-between',
                        alignItems: 'center',
                        gap: 1,
                        '&:hover': {
                          backgroundColor: 'rgba(98, 0, 234, 0.04)'
                        },
                        backgroundColor: `${getRatingColor(getRating(category, item))}10`,
                        borderLeft: `3px solid ${getRatingColor(getRating(category, item))}`
                      }}>
                        <Typography sx={{
                          fontWeight: 500,
                          color: 'text.primary',
                          fontSize: { xs: '0.8rem', md: '0.85rem' }
                        }}>
                          {item}
                        </Typography>
                        <Box
                          sx={{
                            backgroundColor: getRatingColor(getRating(category, item)),
                            color: '#fff',
                            padding: '2px 6px',
                            borderRadius: '4px',
                            display: 'inline-block',
                            fontWeight: 'bold',
                            minWidth: '50px',
                            textAlign: 'center',
                            fontSize: { xs: '0.8rem', md: '0.85rem' }
                          }}
                        >
                          {getRating(category, item)}
                        </Box>
                      </Paper>
                    </Grid>
                  ))}
                </Grid>
              </Box>
            ))}
            <Paper elevation={2} sx={{
              p: 3,
              borderRadius: 2,
              textAlign: 'center',
              maxWidth: 300,
              mx: 'auto',
              backgroundColor: 'white',
              mt: 4
            }}>
              <Box component="img" src="/qrcode.png" alt="QR Code" sx={{
                width: '200px',
                height: '200px',
                display: 'block',
                margin: '0 auto'
              }} />
            </Paper>
          </DialogContent>
          <DialogActions sx={{ 
            justifyContent: 'center', 
            pb: 3, 
            pt: 2,
            gap: 2,
            borderTop: '1px solid rgba(0,0,0,0.1)',
            backgroundColor: 'white'
          }}>
            <Button
              onClick={handleExportImage}
              variant="contained"
              color="primary"
            >
              ‰øùÂ≠ò‰∏∫ÂõæÁâá
            </Button>
            <Button
              onClick={handleExportPDF}
              variant="contained"
              color="secondary"
            >
              ‰øùÂ≠ò‰∏∫PDF
            </Button>
            <Button
              onClick={handleShareToWeChat}
              variant="contained" color="info"
            >
              ÂàÜ‰∫´Âà∞ÂæÆ‰ø°
            </Button>
            <Button
              onClick={() => setOpenReport(false)}
              variant="outlined"
              color="error"
              startIcon={<CloseIcon />}
            >
              ÂÖ≥Èó≠Êä•Âëä
            </Button>
          </DialogActions>
        </Dialog>

        <Snackbar
          open={snackbarOpen}
          autoHideDuration={3000}
          onClose={() => setSnackbarOpen(false)}
          message={snackbarMessage}
          anchorOrigin={{ vertical: 'bottom', horizontal: 'center' }}
        />
      </Container>
      
      <Footer pixelStyle={true} />
      </Box>
    </ThemeProvider>
  );
}

export default App;